/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return PROJ_VERSION.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
            "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
            "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getProperties(String key, String occurValue) {

    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    def value = properties.getProperty(key, occurValue)
    if (value == occurValue) {
        throw new GradleException(String.format(Locale.US,
                "%s not found. Define location with %s in the local.properties file!", key, key))
    }
    return value
}

def getNexusUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getNexusPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getRepositoryUsername() {
    return getNexusUsername()
}

def getRepositoryPassword() {
    return getNexusPassword()
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = PROJ_GROUP
                pom.artifactId = PROJ_ARTIFACTID
                pom.version = PROJ_VERSION

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(),
                            password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(),
                            password: getRepositoryPassword())
                }

                pom.project {
                    name PROJ_POM_NAME
                    packaging POM_PACKAGING
                    description PROJ_DESCRIPTION
                    url PROJ_WEBSITEURL

                    scm {
                        url PROJ_VCSURL
                        connection DEVELOPER_EMAIL
                        developerConnection DEVELOPER_EMAIL
                    }

                    licenses {
                        license {
                            name PROJ_LICENCE_NAME
                            url PROJ_LICENCE_URL
                            distribution PROJ_LICENCE_DEST
                        }
                    }

                    developers {
                        developer {
                            id DEVELOPER_ID
                            name DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        //        source = android.sourceSets.main.java.srcDirs
        //        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        //        classifier = 'javadoc'
        //        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        if (project.hasProperty("kotlin")) {
            from android.sourceSets.main.java.getSrcDirs()
        } else if (project.hasProperty("android")) {
            from android.sourceSets.main.java.sourceFiles
        } else {
            println project
            from sourceSets.main.allSource
        }
        archiveClassifier.set('sources')
    }

    task javaJar(type: Jar, dependsOn: compileReleaseJavaWithJavac) {
        from("build/intermediates/classes/release")
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
        archives javaJar
    }
}